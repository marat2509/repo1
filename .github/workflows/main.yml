name: Cherry-pick commits
on:
  workflow_dispatch:

env:
  REPO_BRANCH: ${{vars.REPO_BRANCH}}
  FETCH_REPO: ${{vars.FETCH_REPO}}
  FETCH_BRANCH: ${{vars.FETCH_BRANCH}}
jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{vars.REPO_BRANCH}}
          fetch-depth: 0

      - name: Set up Git user info
        run: |
          git config --global user.name ${{github.actor}}
          git config --global user.email ${{github.actor}}@users.noreply.github.com

      - name: Fetch repository
        run: |
          echo "Fetching repository $FETCH_REPO with branch $FETCH_BRANCH"
          git fetch $FETCH_REPO $FETCH_BRANCH
      
      - name: Add script
        run: |
          cat > /home/runner/work/_temp/scr.py<< EOF
          import subprocess as subp
          import os
          import platform
          import sys

          def set_variable(key, value) -> None:
              if platform.system() == "Windows":
                  os.system(f"set {key}={value}")
              elif platform.system() == "Linux":
                  os.system(f"export {key}={value}")

          class get:
              def head_commits():
                  head_commits = subp.run(["git", "log", "--pretty=format:%H", "HEAD"], capture_output=True, text=True, shell=True).stdout.splitlines()
                  return head_commits

              def fetch_commits():
                  fetch_commits = subp.run(["git", "log", "--pretty=format:%H", "FETCH_HEAD"], capture_output=True, text=True, shell=True).stdout.splitlines()
                  return fetch_commits

              def last_cherry_picked_commit():
                  for commit in get.head_commits():
                      if commit in get.fetch_commits():
                          return commit
                          break

          exec(sys.argv[1])
          EOF

      - name: Find last cherry-picked commit
        id: last_cherry_pick
        run: |
          fetch_commits=$(python /home/runner/work/_temp/scr.py print(\"\n\".join(get.head_commits())))
          # echo "FETCH_HEAD commits count: $(echo "$fetch_commits" | wc -l)"
          head_commits=$(git log --pretty=format:"%H" HEAD)
          
          while read -r commit; do
              if grep -q "$commit" <<< "$fetch_commits"; then
                  export LAST_CHERRY_PICKED_COMMIT="$commit"
                  echo "$commit"
                  break
              fi
          done <<< "$head_commits"
          echo "Last cherry-picked commit: $LAST_CHERRY_PICKED_COMMIT"
          echo "LAST_CHERRY_PICKED_COMMIT=$LAST_CHERRY_PICKED_COMMIT" >> $GITHUB_ENV

      - name: Get missing commits
        id: missing_commits
        run: |
          MISSING_COMMITS=$(git log --pretty=format:"%H" $LAST_CHERRY_PICKED_COMMIT..FETCH_HEAD | sed -n '1!G;h;$p')
          echo "Missing commits: $MISSING_COMMITS"
              
          echo "MISSING_COMMITS<<EOF" >> $GITHUB_ENV
          echo "$MISSING_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Cherry-pick missing commits
        run: |
          successful_cherry_picks=0
          cherry_picks=()
          conflict_commits=()
          
          echo "Cherry-picking missing commits"
          
          for commit in $MISSING_COMMITS; do
            if ! git cherry-pick $commit; then
              conflict_commits+=($commit)
              git cherry-pick --skip
            else 
              cherry_picks+=($commit)
              successful_cherry_picks=$((successful_cherry_picks+1))
            fi
          done

          echo "Successful cherry picks count: $successful_cherry_picks"
          
          if [ ${#conflict_commits[@]} -gt 0 ]; then 
            echo "Commits with conflicts:"
            for conflict_commit in ${conflict_commits[@]}; do 
              echo "- $conflict_commit"
            done 
          fi

          echo "successful_cherry_picks=$successful_cherry_picks" >> $GITHUB_ENV
          
          echo "cherry_picks<<EOF" >> $GITHUB_ENV
          echo "$(echo ${cherry_picks[@]} | tr ' ' '\n')" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "conflict_commits<<EOF" >> $GITHUB_ENV
          echo "$(echo ${conflict_commits[@]} | tr ' ' '\n')" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          delete-branch: true
          title: Cherry-pick new changes (${{ env.successful_cherry_picks}} commits)
          body: |
            This pull request contains ${{ env.successful_cherry_picks}} successful cherry-picked commits.
            
            <details>
              <summary>Cherry-picked commits:</summary>
            
            ```
            ${{ env.cherry_picks }}
            ```
            
            </details>
