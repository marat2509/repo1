name: Cherry-pick commits
on:
  workflow_dispatch:

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REPO_BRANCH }}

      - name: Set up Git user info
        run: |
          git config --global user.name ${{github.actor}}
          git config --global user.email ${{github.actor}}@users.noreply.github.com

      - name: Fetch repository
        run: |
          git fetch ${{ env.FETCH_REPO }} ${{ env.FETCH_BRANCH }}

      - name: Find last cherry-picked commit
        id: last_cherry_pick
        run: |
          LAST_CHERRY_PICKED_COMMIT=""
          for commit in $(git rev-list HEAD); do
            if git branch --contains $commit -r | grep -q FETCH_HEAD; then
              LAST_CHERRY_PICKED_COMMIT=$commit
              break
            fi
          done
          echo "::set-output name=commit::$LAST_CHERRY_PICKED_COMMIT"

      - name: Get missing commits
        id: missing_commits
        run: |
          MISSING_COMMITS=$(git log --pretty=format:"%H" ${{ steps.last_cherry_pick.outputs.commit }}..FETCH_HEAD)
          echo "::set-output name=commits::$MISSING_COMMITS"

      - name: Cherry-pick missing commits
        run: |
          for commit in ${{ steps.missing_commits.outputs.commits }}; do
            if ! git cherry-pick $commit; then
              echo "Conflict with commit $commit"
              git cherry-pick --abort
            fi
          done

      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ env.REPO_BRANCH }}
          destination_branch: ${{ env.REPO_BRANCH }}
          pr_title: "Cherry-picked commits from ${{ env.FETCH_REPO }}:${{ env.FETCH_BRANCH }}"
